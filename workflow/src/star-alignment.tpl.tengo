self := import("@platforma-sdk/workflow-tengo:tpl")
pConstants := import("@platforma-sdk/workflow-tengo:pframes.constants")
exec := import("@platforma-sdk/workflow-tengo:exec")
file := import("@platforma-sdk/workflow-tengo:file")
pframes := import("@platforma-sdk/workflow-tengo:pframes")
json := import("json")
ll := import("@platforma-sdk/workflow-tengo:ll")
xsv := import("@platforma-sdk/workflow-tengo:pframes.xsv")
pfconvParamsLib := import(":pfconv_params")


self.defineOutputs("starLog",
					"starReport",
					"featureCountsLog",
					"countsReport",
					"rawCounts")


self.body(func(inputs) {
	inputData := inputs[pConstants.VALUE_FIELD_NAME]
	blockId := inputs.blockId
	species := inputs.species
	fileExtension := inputs.fileExtension
	libraryType := inputs.libraryType
	strandness := inputs.strandness
	indexTar := inputs.index.file
	genomeAnn := inputs.genomeAnn.file

	loadIndexFiles:= exec.builder().
				cmd("tar").
				addFile("index.tar", indexTar).
				arg("-xvf").
				arg("index.tar").
				saveFile("chrLength.txt").
				saveFile("chrName.txt").
				saveFile("chrNameLength.txt").
				saveFile("chrStart.txt").
				saveFile("exonGeTrInfo.tab").
				saveFile("exonInfo.tab").
				saveFile("geneInfo.tab").
				saveFile("Genome").
				saveFile("genomeParameters.txt").
				saveFile("Log.out").
				saveFile("SA").
				saveFile("SAindex").
				saveFile("sjdbInfo.txt").
				saveFile("sjdbList.fromGTF.out.tab").
				saveFile("sjdbList.out.tab").
				saveFile("transcriptInfo.tab").
				printErrStreamToStdout().
				saveStdoutContent().
				cache(24 * 60 * 60 * 1000).
				run()

	//indexFileNames := loadIndexFiles.getStdoutStream()
	chrLength := loadIndexFiles.getFile("chrLength.txt")
	chrName := loadIndexFiles.getFile("chrName.txt")
	chrNameLength := loadIndexFiles.getFile("chrNameLength.txt")
	chrStart := loadIndexFiles.getFile("chrStart.txt")
	exonGeTrInfo := loadIndexFiles.getFile("exonGeTrInfo.tab")
	exonInfo := loadIndexFiles.getFile("exonInfo.tab")
	geneInfo := loadIndexFiles.getFile("geneInfo.tab")
	Genome := loadIndexFiles.getFile("Genome")
	genomeParameters := loadIndexFiles.getFile("genomeParameters.txt")
	Log := loadIndexFiles.getFile("Log.out")
	SA := loadIndexFiles.getFile("SA")
	SAindex := loadIndexFiles.getFile("SAindex")
	sjdbInfo := loadIndexFiles.getFile("sjdbInfo.txt")
	sjdbListFromGTFOut := loadIndexFiles.getFile("sjdbList.fromGTF.out.tab")
	sjdbListOut := loadIndexFiles.getFile("sjdbList.out.tab")
	transcriptInfo := loadIndexFiles.getFile("transcriptInfo.tab")

	ll.print("check fileExtension before star", fileExtension)

	star:= exec.builder().
			cmd("STAR").
			mkDir("genomeIndex").
			addFile("genomeIndex/chrLength.txt", chrLength).
			addFile("genomeIndex/chrName.txt", chrName).
			addFile("genomeIndex/chrNameLength.txt", chrNameLength).
			addFile("genomeIndex/chrStart.txt", chrStart).
			addFile("genomeIndex/exonGeTrInfo.tab", exonGeTrInfo).
			addFile("genomeIndex/exonInfo.tab", exonInfo).
			addFile("genomeIndex/geneInfo.tab", geneInfo).
			addFile("genomeIndex/Genome", Genome).
			addFile("genomeIndex/genomeParameters.txt", genomeParameters).
			addFile("genomeIndex/Log.out", Log).
			addFile("genomeIndex/SA", SA).
			addFile("genomeIndex/SAindex", SAindex).
			addFile("genomeIndex/sjdbInfo.txt", sjdbInfo).
			addFile("genomeIndex/sjdbList.fromGTF.out.tab", sjdbListFromGTFOut).
			addFile("genomeIndex/sjdbList.out.tab", sjdbListOut).
			addFile("genomeIndex/transcriptInfo.tab", transcriptInfo).
			arg("--genomeDir").arg("genomeIndex").
			arg("--outSAMtype").arg("BAM").arg("SortedByCoordinate").
			arg("--readFilesIn")

	filesByRIndex := {}
	for sKey, inputFile in inputData.inputs() {
		key := json.decode(sKey)
		r := key[0]
		if (r[0] != 'R' && r[0] != "I") || (r[1] != '1' && r[1] != '2') || len(r) != 2 {
			ll.panic("malformed read index: %v", r)
		}
		filesByRIndex[r] = inputFile
	}

	for rIndex in ["I1", "I2", "R1", "R2"] {
		inputFile := filesByRIndex[rIndex]
		if is_undefined(inputFile) {
			continue
		}
		fileName := "input_" + rIndex + "." + fileExtension
		ll.print("print fileName in loop", fileName)
		star.addFile(fileName, inputFile).
			arg(fileName)
	}

	star = star.
			arg("--readFilesCommand").arg("gunzip -c").
			arg("--outFileNamePrefix").arg("sample_").
			saveFile("sample_Aligned.sortedByCoord.out.bam").
			saveFile("sample_Log.final.out").
			printErrStreamToStdout().
			saveStdoutContent().
			cache(24 * 60 * 60 * 1000).
			run()


	starLog := star.getStdoutStream()
	starReport := star.getFile("sample_Log.final.out")
	bamFile := star.getFile("sample_Aligned.sortedByCoord.out.bam")

	// Calculate counts from BAM file
	featureCounts:= exec.builder().
					cmd("featureCounts").
					addFile("sample_Aligned.sortedByCoord.out.bam", bamFile).
					addFile("annotations.gtf", genomeAnn).
					arg("-t").arg("exon").
					arg("-g").arg("gene_id").
					arg("-s").arg(strandness).
					arg("-a").arg("annotations.gtf")

	if libraryType == "PairedEnd" {
		featureCounts = featureCounts.arg("-p")
		}

	featureCounts = featureCounts.
					arg("-o").arg("rawCounts.tsv").
					arg("sample_Aligned.sortedByCoord.out.bam").
					saveFile("rawCounts.tsv").
					saveFile("rawCounts.tsv.summary"). // featureCounts qc
					printErrStreamToStdout().
					saveStdoutContent().
					cache(24 * 60 * 60 * 1000).
					run()


	featureCountsLog := featureCounts.getStdoutStream()
	countsReport := featureCounts.getFile("rawCounts.tsv.summary")

	// From tsv to PColumn for rawCount
	// How the tsv looks
	// # some featureCounts command info
	// Geneid				Chr	Start		End		Strand	Length	sample_Aligned.sortedByCoord.out.bam
	// ENSMUSG00000104478	1	108344807	108347562	+	2756	0
	// ...

	// Modifying tsv
	// Geneid	sample_Aligned.sortedByCoord.out.bam
	// ENSMUSG00000104478	0
	// ...

	outputFeatureCounts := featureCounts.getFile("rawCounts.tsv")

	formatCountMatrix := exec.builder().
							cmd("/usr/bin/env").
							arg("bash").
							arg("-c").
							//arg("cut -f 1,7 rawCounts.tsv > cleanRawCounts.tsv").
							arg("sed '1d' rawCounts.tsv | cut -f 1,7 > cleanRawCounts.tsv").
							addFile("rawCounts.tsv", outputFeatureCounts).
							saveFile("cleanRawCounts.tsv").
							printErrStreamToStdout().
							saveStdoutContent().
							cache(24 * 60 * 60 * 1000).
							run()


	tsvImportParams := pfconvParamsLib.getColumns(blockId, species)
	importResult := xsv.importFile(formatCountMatrix.getFile("cleanRawCounts.tsv"), "tsv", tsvImportParams, { dataOnly: true })
	// PFrame
	//   rawCounts.data
	//   rawCounts.spec
	// after we add { dataOnly: true }
	//   rawCounts [ containing value from rawCounts.data ]
	ll.print("print import params", tsvImportParams)

	output := {
		starLog: starLog,
		starReport: starReport,
		featureCountsLog: featureCountsLog,
		countsReport: countsReport,
		rawCounts: importResult.get("rawCounts")
	}

	return output

})
