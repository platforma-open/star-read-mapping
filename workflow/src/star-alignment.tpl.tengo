self := import("@platforma-sdk/workflow-tengo:tpl")
pConstants := import("@platforma-sdk/workflow-tengo:pframes.constants")
exec := import("@platforma-sdk/workflow-tengo:exec")
file := import("@platforma-sdk/workflow-tengo:file")
pframes := import("@platforma-sdk/workflow-tengo:pframes")
json := import("json")
ll := import("@platforma-sdk/workflow-tengo:ll")
xsv := import("@platforma-sdk/workflow-tengo:pframes.xsv")
pfconvParamsLib := import(":pfconv_params")
assets := import("@platforma-sdk/workflow-tengo:assets")
genomeAssetsLib := import(":genomeAssets")


self.defineOutputs("starLog",
					"starReport",
					"alignedBAM",
					"featureCountsLog",
					"countsReport",
					"countMatrixImport")


self.body(func(inputs) {
	inputData := inputs[pConstants.VALUE_FIELD_NAME]
	blockId := inputs.blockId
	species := inputs.species
	fileExtension := inputs.fileExtension
	strandness := inputs.strandness


//genomeAssets := assets.importAsset("@platforma-open/milaboratories.star-read-mapping.genome-asset:saccharomyces-cerevisiae")
genomeAssets := genomeAssetsLib.getGenomeAsset(species)

	star:= exec.builder().
			software(assets.importSoftware("@platforma-open/milaboratories.software-star:star")).
			mkDir("genomeIndex").
			addAsset(genomeAssets, "genomeIndex", ["chrLength.txt"]).
			addAsset(genomeAssets, "genomeIndex", ["chrName.txt"]).
			addAsset(genomeAssets, "genomeIndex", ["chrNameLength.txt"]).
			addAsset(genomeAssets, "genomeIndex", ["chrStart.txt"]).
			addAsset(genomeAssets, "genomeIndex", ["exonGeTrInfo.tab"]).
			addAsset(genomeAssets, "genomeIndex", ["exonInfo.tab"]).
			addAsset(genomeAssets, "genomeIndex", ["geneInfo.tab"]).
			addAsset(genomeAssets, "genomeIndex", ["Genome"]).
			addAsset(genomeAssets, "genomeIndex", ["genomeParameters.txt"]).
			//addAsset(genomeAssets, "genomeIndex", ["Log.out"]).
			addAsset(genomeAssets, "genomeIndex", ["SA"]).
			addAsset(genomeAssets, "genomeIndex", ["SAindex"]).
			addAsset(genomeAssets, "genomeIndex", ["sjdbInfo.txt"]).
			addAsset(genomeAssets, "genomeIndex", ["sjdbList.fromGTF.out.tab"]).
			addAsset(genomeAssets, "genomeIndex", ["sjdbList.out.tab"]).
			addAsset(genomeAssets, "genomeIndex", ["transcriptInfo.tab"]).
			arg("--genomeDir").arg("genomeIndex").
			arg("--outSAMtype").arg("BAM").arg("SortedByCoordinate").
			arg("--readFilesIn")

	filesByRIndex := {}
	for sKey, inputFile in inputData.inputs() {
		key := json.decode(sKey)
		r := key[0]
		if (r[0] != 'R' && r[0] != "I") || (r[1] != '1' && r[1] != '2') || len(r) != 2 {
			ll.panic("malformed read index: %v", r)
		}
		filesByRIndex[r] = inputFile
	}

	nReads := 0

	for rIndex in ["R1", "R2"] {
		inputFile := filesByRIndex[rIndex]
		if is_undefined(inputFile) {
			continue
		}
		nReads = nReads + 1
		fileName := "input_" + rIndex + "." + fileExtension
		ll.print("print fileName in loop", fileName)
		star.addFile(fileName, inputFile).
			arg(fileName)
	}

	ll.assert(nReads != 0, "No R read indexes")

	star = star.
			arg("--readFilesCommand").arg("gunzip -c").
			arg("--outFileNamePrefix").arg("sample_").
			arg("--runThreadN").arg("4").
			saveFile("sample_Aligned.sortedByCoord.out.bam").
			saveFile("sample_Log.final.out").
			printErrStreamToStdout().
			saveStdoutContent().
			cache(24 * 60 * 60 * 1000).
			run()


	starLog := star.getStdoutStream()
	starReport := star.getFile("sample_Log.final.out")
	bamFile := star.getFile("sample_Aligned.sortedByCoord.out.bam")

	// Calculate counts from BAM file
	featureCounts:= exec.builder().
					software(assets.importSoftware("@platforma-open/milaboratories.software-subread:featureCounts")).
					addFile("sample_Aligned.sortedByCoord.out.bam", bamFile).
					addAsset(genomeAssets, ".", ["annotations.gtf"]).
					arg("-t").arg("exon").
					arg("-g").arg("gene_id").
					arg("-s").arg(strandness).
					arg("-a").arg("annotations.gtf")

	if nReads == 2 {
		featureCounts = featureCounts.arg("-p")
	}

	featureCounts = featureCounts.
					arg("-o").arg("rawCounts.tsv").
					arg("sample_Aligned.sortedByCoord.out.bam").
					arg("-T").arg("4").
					saveFile("rawCounts.tsv").
					saveFile("rawCounts.tsv.summary"). // featureCounts qc
					printErrStreamToStdout().
					saveStdoutContent().
					cache(24 * 60 * 60 * 1000).
					run()


	featureCountsLog := featureCounts.getStdoutStream()
	countsReport := featureCounts.getFile("rawCounts.tsv.summary")
	outputFeatureCounts := featureCounts.getFile("rawCounts.tsv")

	tsvImportParams := pfconvParamsLib.getColumns(blockId, species)
	countMatrixImport := xsv.importFile(featureCounts.getFile("rawCounts.tsv"), "tsv", tsvImportParams, { dataOnly: true })

	// PFrame
	//   rawCounts.data
	//   rawCounts.spec
	// after we add { dataOnly: true }
	//   rawCounts [ containing value from rawCounts.data ]
	ll.print("print import params", tsvImportParams)

	output := {
		starLog: starLog,
		starReport: file.exportFile(starReport),
		alignedBAM: bamFile,
		featureCountsLog: featureCountsLog,
		countsReport: file.exportFile(countsReport),
		countMatrixImport: countMatrixImport
	}

	return output

})
