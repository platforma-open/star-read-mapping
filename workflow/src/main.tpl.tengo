// STAR preprocessing workflow
//
// Minimum Viable Block:
//
// Expected arguments:
//  - ref: Ref               	- a reference to the fastq file
//  - species: string        	- species
//  - libraryType: string	 	- single-end or paired-end
//
// Outputs:
//	- progress: handle		 	- analysis log
//
// Exports:
//	- rawCounts: p-frame 		- raw count matrix p-frame
//
// Extended version:
//
// Expected arguments:
//  - ref: Ref               	- a reference to the fastq file
//  - species: string        	- species
//  - libraryType: string	 	- single-end or paired-end
//
// Outputs:
//	- progress: handle		 	- analysis log
//	- pcaComponents: p-frame 	- PCA p-frame
//	- sampleDistances: p-frame 	- Hierarchical clustering output distances
//	- multiQC: handle 			- multiQC report
//
// Exports:
//	- rawCounts: p-frame 		- raw count matrix p-frame
//	- normCounts: p-frame		- normalized count matrix p-frame
//

wf := import("@platforma-sdk/workflow-tengo:workflow")

ll := import("@platforma-sdk/workflow-tengo:ll")
xsv := import("@platforma-sdk/workflow-tengo:pframes.xsv")
exec := import("@platforma-sdk/workflow-tengo:exec")
file := import("@platforma-sdk/workflow-tengo:file")
pSpec := import("@platforma-sdk/workflow-tengo:pframes.spec")
render := import("@platforma-sdk/workflow-tengo:render")
assets := import("@platforma-sdk/workflow-tengo:assets")
pframes := import("@platforma-sdk/workflow-tengo:pframes")
llPFrames := import("@platforma-sdk/workflow-tengo:pframes.ll")

genomes := import(":genomes")
convParams := import(":pf-params")
targetOutputs := import(":target-outputs")

starAlignmentTpl := assets.importTemplate(":star-alignment")

wf.prepare(func(args){
	return{
		resolvedInput: wf.resolve(args.ref, { errIfMissing: true })
	}
})


wf.body(func(args) {

	blockId := wf.blockId().getDataAsJson()
	input := args.resolvedInput
	inputSpec := input.spec

	sampleAxisSpec := inputSpec.axesSpec[0]
	ll.assert(sampleAxisSpec.name == "pl7.app/sampleId", "Unexpected input axes structure")

	species := args.species
	strandness := args.strandness

	fileExtension := inputSpec.domain["pl7.app/fileExtension"]

	targetOutputs := targetOutputs.getTargetOutputs(species, blockId)

	starResults := pframes.processColumn(
		{ spec: inputSpec, data: input.data }, starAlignmentTpl,
		targetOutputs,
		{
			aggregate: [{
				name: "pl7.app/sequencing/lane",
				optional: true
			}, {
				name: "pl7.app/sequencing/readIndex",
				optional: true
			}],
			// resulting aggregation axes names will be checked against supported combinations
			// in the body template
			passAggregationAxesNames: true,

			// will be automatically propagated to all output specs
			traceSteps: [{type: "milaboratories.star-read-mapping", id: blockId, importance: 20, label: "STAR - " + genomes.getSpeciesName(species)}],

			extra: {
				species: species,
				strandness: strandness,
				fileExtension: fileExtension
			}
		}
	)

	rawCountsPf := {
		"rawCounts.spec": starResults.outputSpec("rawCounts", "rawCounts"),
		"rawCounts.data": starResults.outputData("rawCounts", "rawCounts")
	}

	// Convert pf to csv
	csvCounts := xsv.exportFrame(rawCountsPf, "csv", {})

	// Run clustering QC on all samples
	clusteringQC := exec.builder().
		software(assets.importSoftware("@platforma-open/milaboratories.star-read-mapping.software:run-sample-qc")).
		arg("rawCounts.csv").
		arg(".").
		addFile("rawCounts.csv", csvCounts).
		saveFile("pca_results.csv").
		saveFile("sample_distances.csv").
		printErrStreamToStdout().
		saveStdoutContent().
		cache(24 * 60 * 60 * 1000).
		run()

	pcaCsvImportParams := convParams.getPCAConvParams(blockId, sampleAxisSpec)
	pcaComponents := xsv.importFile(clusteringQC.getFile("pca_results.csv"), "csv", pcaCsvImportParams)

	HQtsvImportParams := convParams.getDistanceConvParams(blockId, sampleAxisSpec)

	// Load data matrix and transpose it converting the first axis (Sample) into
	// sample1 column, the second axis (previous columns) into sample2 columns,
	// and the distance values in the "value" column
	sampleDistances := xsv.importFile(clusteringQC.getFile("sample_distances.csv"), "csv", HQtsvImportParams,
												{transpose: {
													pAxisIdx: 0,
													pAxisNameOverride: "sample1",
													sAxisName: "sample2",
													valueName: "value"
												}})

	countNorm := exec.builder().
		software(assets.importSoftware("@platforma-open/milaboratories.star-read-mapping.software:normalize-counts")).
		arg("rawCounts.csv").arg(".").arg(species).
		addFile("rawCounts.csv", csvCounts).
		saveFile("normalized_counts.csv").
		//saveFile("lognormalized_counts.csv").
		printErrStreamToStdout().
		saveStdoutContent().
		cache(24 * 60 * 60 * 1000).
		run()

	normCountsImportParams := convParams.getNormCountsConvParams(blockId, sampleAxisSpec, species)
	normCountsPf := xsv.importFile(countNorm.getFile("normalized_counts.csv"), "csv", normCountsImportParams)

	outputs := {
		starProgress: starResults.outputData("starLog"),
		starQc: pframes.exportColumnData(starResults.outputData("starReport")),
		featureCountsProgress: starResults.outputData("featureCountsLog"),
		featureCountsQc: pframes.exportColumnData(starResults.outputData("countsReport")),
		rawCountsPf: pframes.exportFrame(rawCountsPf),
		pcaComponents: pframes.exportFrame(pcaComponents),
		normCountsPf: pframes.exportFrame(normCountsPf),
		sampleDistances: pframes.exportFrame(sampleDistances)
	}

	trace := pSpec.makeTrace(inputSpec,
		{type: "milaboratories.star-read-mapping", id: blockId, importance: 20, label: "STAR - " + genomes.getSpeciesName(species)}
	)

	exports := {
		rawCount: {
			spec: rawCountsPf["rawCounts.spec"],
			data: rawCountsPf["rawCounts.data"]
		},
		normCount : {
			spec: trace.inject(normCountsPf["normcounts.spec"]),
			data: normCountsPf["normcounts.data"]
		},
		geneSymbols: {
			spec: trace.inject(normCountsPf["genesymbol.spec"]),
			data: normCountsPf["genesymbol.data"]
		}
	}

	return {
		outputs: outputs,
		exports: exports
	}
})
