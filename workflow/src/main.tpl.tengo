// STAR preprocessing workflow
//
// Minimum Viable Block:
//
// Expected arguments:
//  - ref: Ref               	- a reference to the fastq file
//  - species: string        	- species
//  - libraryType: string	 	- single-end or paired-end
//
// Outputs:
//	- progress: handle		 	- analysis log
//
// Exports:
//	- rawCounts: p-frame 		- raw count matrix p-frame
//
// Extended version:
//
// Expected arguments:
//  - ref: Ref               	- a reference to the fastq file
//  - species: string        	- species
//  - libraryType: string	 	- single-end or paired-end
//
// Outputs:
//	- progress: handle		 	- analysis log
//	- pcaComponents: p-frame 	- PCA p-frame
//	- sampleDistances: p-frame 	- Hierarchical clustering output distances
//	- multiQC: handle 			- multiQC report
//
// Exports:
//	- rawCounts: p-frame 		- raw count matrix p-frame
//	- normCounts: p-frame		- normalized count matrix p-frame
//

wf := import("@platforma-sdk/workflow-tengo:workflow")
ll := import("@platforma-sdk/workflow-tengo:ll")
render := import("@platforma-sdk/workflow-tengo:render")
file := import("@platforma-sdk/workflow-tengo:file")
llPFrames := import("@platforma-sdk/workflow-tengo:pframes.ll")
pfconvParamsLib := import(":pfconv_params")
assets := import("@platforma-sdk/workflow-tengo:assets")
pframes := import("@platforma-sdk/workflow-tengo:pframes")
pUtil := import("@platforma-sdk/workflow-tengo:pframes.util")

starAlignmentTpl := assets.importTemplate(":star-alignment")

wf.prepare(func(args){
	return{
		resolvedInput: wf.resolve(args.ref, { errIfMissing: true })
	}
})


wf.body(func(args) {

	blockId := wf.blockId().getDataAsJson()
	input := args.resolvedInput
	inputSpec := input.spec


	species := args.species
	libraryType := args.libraryType
	strandness := args.strandness

	pfconvParams := pfconvParamsLib.getColumns(blockId, species)

	// Get indexed genome
	indexImport := file.importFile(args.indexFile) // The file can be accessed with indexImport.file
	// Get genome annotation
	genomeAnnImport := file.importFile(args.genomeAnnFile) // The file can be accessed with genomeAnnImport.file

	fileExtension := inputSpec.domain["pl7.app/fileExtension"]

	aggregationTargets := [{
		type: "Resource",
		name: "starLog"
	}, {
		type: "Resource",
		name: "starReport"
	}, {
		type: "Resource",
		name: "featureCountsLog"
	}, {
		type: "Resource",
		name: "countsReport"
	}, {
		type: "BinaryPartitioned",
		name: "rawCounts",
		path: ["countMatrixImport", "rawCounts"],
		partitionKeyLength: 0 // [geneId]
	}]

	starResults := llPFrames.aggregate(
		input.data, [1], starAlignmentTpl,
		aggregationTargets,
		false,
		{
			blockId: blockId,
			species: species,
			libraryType: libraryType,
			strandness: strandness,
			index: indexImport,
			genomeAnn: genomeAnnImport,
			fileExtension: fileExtension
		}
	)

	pf := {
			"rawCounts.spec":
				{
				kind: "PColumn",
				name: "countMatrix",
				domain: {
					"pl7.app/blockId": blockId
				},
				valueType: "Double",
				axesSpec: [
					inputSpec.axesSpec[0],
					{
						"name": "pl7.app/rna-seq/geneId",
						"type": "String",
						"domain": {
						"pl7.app/blockId": blockId,
							"pl7.app/species": species
						},
						"annotations": {
							"pl7.app/label": "Ensembl Id"
						}
					}
				]
			},
			"rawCounts.data": starResults.output("rawCounts")
		}
	
	// convert pf to tsv

	// // Run clustering QC on all samples
	// clusteringQC := exec.builder().
	// 				cmd("/usr/bin/env").
	// 				arg("bash").
	// 				arg("-c").
	// 				arg("run_sample_qc.R rawCounts.csv").
	// 				addFile("rawCounts.tsv").
	// 				saveFile("PCAComponents.tsv").
	// 				saveFile("sampleDistances.tsv").
	// 				printErrStreamToStdout().
	// 				saveStdoutContent().
	// 				cache(24 * 60 * 60 * 1000).
	// 				run()

	// PCAtsvImportParams := pcaPfconvParamsLib.getColumns(blockId, inputSpec)
	// PCAComponents := xsv.importFile(clusteringQC.getFile("PCAComponents.tsv"), "tsv", PCAtsvImportParams)
	
	// HQtsvImportParams := hcPfconvParamsLib.getColumns(blockId, inputSpec)
	// sampleDistances := xsv.importFile(clusteringQC.getFile("sampleDistances.tsv"), "tsv", HQtsvImportParams)


	outputs := {
		indexImportHandle: indexImport.handle,
		genomeAnnImportHandle: genomeAnnImport.handle,
		starProgress: starResults.output("starLog"),
		starQc: starResults.output("starReport"),
		featureCountsProgress: starResults.output("featureCountsLog"),
		featureCountsQc: starResults.output("countsReport"),
		pf: pframes.exportFrame(pf)//,
		// pcaComponents: pframes.exportFrame(PCAComponents)
	//	pcaComponents: pframes.exportFrame(sampleDistances)
	}


	 // sample from inputSpec + previous specs
	exports := {
		rawCount : {
			spec:
				{
				kind: "PColumn",
				name: "countMatrix",
				domain: {
					"pl7.app/blockId": blockId
				},
				valueType: "Double",
				annotations: {
					"pl7.app/label": "Expression level",
					"pl7.app/rna-seq/normalized": "false"
					},
				axesSpec: [
					inputSpec.axesSpec[0],
					{
						"name": "pl7.app/rna-seq/geneId",
						"type": "String",
						"domain": {
						"pl7.app/blockId": blockId,
							"pl7.app/species": species
						},
						"annotations": {
							"pl7.app/label": "Ensembl Id"
						}
					}
				]
			},
			data: starResults.output("rawCounts")
		}
	}

	return {
		outputs: outputs,
		exports: exports
	}
})
